public boolean isTrialable() {
   public boolean x() {
         return this.ex.getTrialTime() > 0;
     }
	
	protected boolean isLegal() {
        return this.mIsLegal;
    }
	
	 public boolean isAuthorizedResource() {

     public boolean k() {
            return this.ex.isProductBought();
        }
	
	
    public boolean isPermanentRights() {
    这个方法现在是这个样子
    public boolean z() {
        File file = new File(this.ey.c());
        return k() || l() == 0 || (!(!n() || file.exists() || x()) || (file.exists() && DrmManager.isPermanentRights(file)));
    }
	
	
	-----------------
	
	
    public static AdInfo parseAdInfo(String arg9) {
        AdInfo v8 = null;
        AdInfo v4 = new AdInfo();
        try {
            JSONObject v1 = new JSONObject(arg9);
            v4.setId(v1.getString("id"));
            v4.setTemplate(v1.getString("template"));
            v4.setTargetType(AdTargetType.values()[v1.getInt("targetType")]);
            v4.setAdInfoPassback(v1.getString("ex"));
            v4.setLandingPageUrl(v1.getString("landingPageUrl"));
            if(v4.getTargetType() == AdTargetType.APP) {
                v4.setTitle(v1.getString("title"));
                v4.setActionUrl(v1.getString("actionUrl"));
                v4.setIconUrl(v1.getString("iconUrl"));
                v4.setPackageName(v1.getString("packageName"));
                v4.setCategoryName(v1.optString("categoryName", ""));
                v4.setSource(v1.optString("source", ""));
                v4.setApkSize(v1.optLong("apkSize"));
                v4.setAllDownloadNum(v1.optLong("allDownloadNum"));
                v4.setDeeplink(v1.optString("deeplink", ""));
                DeeplinkInfo v2 = new DeeplinkInfo();
                v2.mCategory = v4.getCategoryName();
                v2.mName = v4.getTitle();
                v2.mIconUrl = v4.getIconUrl();
                v2.mPackage = v4.getPackageName();
                v2.mDownloadUrl = v4.getActionUrl();
                v2.mEx = v4.getAdInfoPassback();
                v2.mLandingPageDeeplinkUrl = v4.getDeeplink();
                v4.setDeeplinkInfo(v2);
            }

            v4.setImgUrls(JSONUtils.convertJsonArrayToList(v1.getJSONArray("imgUrls")));
            v4.setWidth(v1.getInt("width"));
            v4.setHeight(v1.getInt("height"));
            v4.setViewMonitorUrls(JSONUtils.convertJsonArrayToList(v1.optJSONArray("viewMonitorUrls")));
            v4.setClickMonitorUrls(JSONUtils.convertJsonArrayToList(v1.optJSONArray("clickMonitorUrls")));
            v4.setDownloadMonitorUrls(JSONUtils.convertJsonArrayToList(v1.optJSONArray("downloadMonitorUrls")));
            JSONObject v5 = v1.optJSONObject("parameters");
            if(v5 != null) {
                v4.setAdAutoLaunch(v5.optBoolean("autolaunch", false));
                v4.setAdAutoDownload(v5.optBoolean("startDownload", false));
            }

            JSONObject v0 = v1.optJSONObject("adcontrol");
            if(v0 != null) {
                v4.setAdMarker(v0.optInt("adwatermark", 1));
            }

            if(AdInfo.isSupported(v4)) {
                return v4;
            }
        }
        catch(Exception v3) {
            v3.printStackTrace();
            return v8;
        }

        return v8;
    }
	
	
	 private static boolean isSupported(AdInfo arg3) {
        if((AdInfo.AdSupportedTypes.contains(arg3.getTargetType())) && (AdInfo.AdTemplates.contains(arg3.getTemplate())) && arg3.getImgUrls() != null && !arg3.getImgUrls().isEmpty() && arg3.getHeight() > 0 && arg3.getWidth() > 0) {
            return 1;
        }

        return 0;
    }
	
	 public void showAdMark() {
        this.mAdMark.setVisibility(0);
    }
	
	 private View buildAdView(PageItem arg5) {
        return new AdBannerFactory(this.mActivity, arg5.getExtraMeta().getSerializable("ad_info")).buildAdBannerView();
    }
	
	 public HybridResourceResponse shouldInterceptRequest(HybridView arg4, String arg5) {
            HybridResourceResponse v1;
            if(arg5 != null) {
                try {
                    if(!arg5.startsWith("http") && !arg5.startsWith("https")) {
                        goto label_11;
                    }

                    v1 = WebCacheManager.getResource(arg5);
                    if(v1 == null) {
                        goto label_11;
                    }
                }
                catch(Exception v0) {
                    goto label_11;
                }

                return v1;
            }

        label_11:
            return super.shouldInterceptRequest(arg4, arg5);
        }
		
		  private static boolean isFreshMan() {
        if(ResourceHelper.getUserFirstOpenHomeTime() < 0) {
            String[] v0 = new File(ResourceBrowserConstants.MIUI_PATH + "theme/.data/content/theme/").list();
            if(v0 != null && v0.length != 0) {
                return 0;
            }

            return 1;
        }

        return 0;
    }
	
	 public static boolean hasFreshManMarkRecord(Context arg4) {
        boolean v0 = true;
        if(PreferenceManager.getDefaultSharedPreferences(arg4).getInt("fresh_man_mark", -1) != 1) {
            v0 = false;
        }

        return v0;
    }
	
	